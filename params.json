{"note":"Don't delete this file! It's used internally to help with page regeneration.","name":"JavaCRUD","google":"","body":"É muito comum, nesse mundo movimentado da programação, nos depararmos com esse termo: CRUD!\r\n\r\nÉ tão mecânico as vezes, que nem paramos para reparar o que realmente estamos fazendo, o que de fato é esse CRUD e onde ele pode ser usado...\r\n\r\nEntão, vamos às formalidades:\r\n**\"CRUD, é um termo utilizado (convencionado) para designar as quatro operações básicas em Banco de Dados (Essa é a conceitualização/exemplificação mais comum): Create, Read, Update e Delete em Inglês.\"**\r\n\r\nO conceito pode se estender a um nível mais inteligível pelo usuário como:\r\n**CRUD é uma sigla usada para falar das quatro coisas que mais fazemos numa aplicação: inserir, alterar, consultar e deletar, simples ora...\"**\r\n\r\nÉ simples mesmo, a questão aqui é a associação. Estamos bem (e muito) acostumados a achar que essas são as únicas formas de fazer CRUD. Podemos até ver dizer: \"Ah, sem banco de dados CRUD não existe...\".\r\n\r\nQue nada, ele existe para manipular dados. É como falar do pattern DAO (Data Access Object); estamos tão acostumados a usar o DAO atrelado à persistência de dados via BD, que esquecemos que o \"Objeto de Acesso a Dados\" pode lidar com dados em diversos lugares, como em um arquivo de texto, por exemplo...\r\n\r\nDa mesma forma, temos exemplos de CRUDs feitos com arquivos xml, planilhas excell, Cloud computing, NoSQL (que não deixa de ser banco também... :P), memory saving, dentre inúmeras outras formas de \"persistência de dados\".\r\n\r\nA forma como se deve usar ou não determinadas coisas nos seus CRUDs é bem diferenciada, uma vez que cada projeto é um por si, e CRUDs são a maior parte deles... Porém seguir as boas práticas é importante, considerando que eles estarão presentes em boa parte de nossas vidas como programadores...\r\n\r\nEste CRUD foi construido utilizando o SGBD MySQL.","tagline":"CRUD application based on the Swing Application Framework"}